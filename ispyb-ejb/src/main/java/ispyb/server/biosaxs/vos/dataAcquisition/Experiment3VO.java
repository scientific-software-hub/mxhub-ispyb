/*******************************************************************************
 * This file is part of ISPyB.
 * 
 * ISPyB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ISPyB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with ISPyB.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Contributors : S. Delageniere, R. Leal, L. Launer, K. Levik, S. Veyrier, P. Brenchereau, M. Bodin, A. De Maria Antolinos
 ******************************************************************************************************************************/

package ispyb.server.biosaxs.vos.dataAcquisition;

import static jakarta.persistence.GenerationType.IDENTITY;
//import ispyb.server.biosaxs.services.core.plateType.PlateType3Service;
import ispyb.server.biosaxs.vos.assembly.Macromolecule3VO;
import ispyb.server.biosaxs.vos.dataAcquisition.plate.Platetype3VO;
import ispyb.server.biosaxs.vos.dataAcquisition.plate.Sampleplate3VO;
import ispyb.server.biosaxs.vos.dataAcquisition.plate.Sampleplateposition3VO;
import ispyb.server.biosaxs.vos.datacollection.MeasurementTodataCollection3VO;
import ispyb.server.biosaxs.vos.datacollection.SaxsDataCollection3VO;
import ispyb.server.common.util.ejb.Ejb3ServiceLocator;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.naming.NamingException;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Transient;

/**
 * Experiment3VO generated by hbm2java
 */
@Entity
@Table(name = "Experiment")
public class Experiment3VO implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	protected Integer experimentId;

	protected Integer sessionId;

	protected String name;

	protected Date creationDate;

	protected String sourceFilePath;

	protected String type;

	protected String comments;

	protected String dataAcquisitionFilePath;

	protected String status;

	protected int proposalId;

	protected Set<Sampleplate3VO> samplePlate3VOs = new HashSet<Sampleplate3VO>(0);

	protected List<Platetype3VO> platetype3VOs = new ArrayList<Platetype3VO>();

	protected Set<Specimen3VO> samples3VOs = new HashSet<Specimen3VO>(0);

	protected Set<SaxsDataCollection3VO> dataCollections = new HashSet<SaxsDataCollection3VO>(0);

	/** Services for filling up plate types **/
	private static final Ejb3ServiceLocator ejb3ServiceLocator = Ejb3ServiceLocator.getInstance();

	//private PlateType3Service plateType3Service;

	public Experiment3VO() {
		// TODO remove this : not correct design no service should be called from a VO to be replaced by the init method of ExperimentService		
//		try {
//			this.plateType3Service = (PlateType3Service) ejb3ServiceLocator.getLocalService(PlateType3Service.class);
//			this.platetype3VOs = this.plateType3Service.findAll();
//		} catch (NamingException e) {
//			e.printStackTrace();
//		}
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "experimentId", unique = true, nullable = false)
	public Integer getExperimentId() {
		return this.experimentId;
	}

	public void setExperimentId(Integer experimentId) {
		this.experimentId = experimentId;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "sessionId")
	public Integer getSessionId() {
		return this.sessionId;
	}

	public void setSessionId(Integer sessionId) {
		this.sessionId = sessionId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creationDate", length = 0)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Column(name = "comments", length = 512)
	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	@Column(name = "proposalId")
	public int getProposalId() {
		return this.proposalId;
	}

	public void setProposalId(int proposalId) {
		this.proposalId = proposalId;
	}

	/**
	 * TRANSIENT METHODS *.
	 * 
	 * @param macromolecules
	 *            List of all the macromolecules of the proposal which this experiment belongs to
	 * @return the macromolecules
	 */
	@Transient
	public Set<Macromolecule3VO> getMacromolecules() {
		Set<Macromolecule3VO> macromolecules = new HashSet<Macromolecule3VO>();
		for (Specimen3VO sample : this.getSamples()) {
			if (sample.getMacromolecule3VO() != null) {
				macromolecules.add(sample.getMacromolecule3VO());
			}
		}
		return macromolecules;
	}

	@Transient
	public List<Measurement3VO> getMeasurements() {
		List<Measurement3VO> specimen3VOs = new ArrayList<Measurement3VO>();
		for (Specimen3VO sample : this.getSamples()) {
			specimen3VOs.addAll(sample.getMeasurements());
		}

		return specimen3VOs;
	}

	@Transient
	public Specimen3VO getSampleWithThisBufferId(int bufferId) {
		for (Specimen3VO sample : this.getSamples()) {
			if (sample.getBufferId().equals(bufferId) && (sample.getMacromolecule3VO() == null)) {
				return sample;
			}
		}
		return null;
	}

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)
	@JoinColumn(name = "experimentId")
	public Set<Sampleplate3VO> getSamplePlate3VOs() {
		return samplePlate3VOs;
	}

	public void setSamplePlate3VOs(Set<Sampleplate3VO> samplePlate3VOs) {
		this.samplePlate3VOs = samplePlate3VOs;
	}

	@Transient
	public List<Platetype3VO> getPlatetype3VOs() {
		return this.platetype3VOs;
	}
	
	public void setPlatetype3VOs(List<Platetype3VO> platetype3vOs) {
		platetype3VOs = platetype3vOs;
	}

	@Transient
	public Measurement3VO getMeasurementById(Integer measurementId) {
		List<Measurement3VO> measurements = this.getMeasurements();
		for (Measurement3VO measurement : measurements) {
			// System.out.println("Experiment3VO.getSpecimenById: " + measurement);
			if (measurement.getMeasurementId() != null) {
				if (measurement.getMeasurementId().equals(measurementId)) {
					return measurement;
				}
			}
		}
		return null;
	}

	@Transient
	public Sampleplate3VO getSamplePlateById(Integer samplePlateId) {
		Set<Sampleplate3VO> samplePlates = this.getSamplePlate3VOs();
		for (Sampleplate3VO samplePlate : samplePlates) {
			if (samplePlate.getSamplePlateId().equals(samplePlateId)) {
				return samplePlate;
			}
		}
		return null;
	}

	@Transient
	public Sampleplateposition3VO getPosition(Integer samplePlateId, int row, int well) {
		Sampleplate3VO samplePlate = this.getSamplePlateById(samplePlateId);
		if (samplePlate != null) {
			for (Sampleplateposition3VO position : samplePlate.getSampleplateposition3VOs()) {
				if ((position.getRowNumber() == row) && (well == position.getColumnNumber())) {
					return position;
				}
			}
		}

		/** If not found **/
		return null;

	}


	@Transient
	public String getCodeSample(Specimen3VO sample) {
		int count = 1;
		String name = new String();
		do {
			if (sample.getMacromolecule3VO() != null) {
				name = sample.getMacromolecule3VO().getAcronym() + "_" + "Buffer_Not-Know";// this.getBufferById(sample.getBufferId()).getAcronym();
			} else {
				name = "Buffer_Not-Know"; // this.getBufferById(sample.getBufferId()).getAcronym();
			}
			if (count > 0) {
				name = name + "-" + count;
			}
			count++;
		} while (this.isSpecimenCodeUsed(name, sample));
		return name;

	}

	@Transient
	public boolean isSpecimenCodeUsed(String code, Specimen3VO specimen) {
		Set<Specimen3VO> samples = this.getSamples();
		for (Specimen3VO sample3vo : samples) {
			if (sample3vo.getCode().equals(code)) {
				if (specimen.getSpecimenId() == null) {
					return true;
				} else {
					if (specimen.getSpecimenId().equals(sample3vo.getSpecimenId())) {
						return false;
					} else {
						return true;
					}
				}
			}
		}
		return false;
	}

	@OneToMany(fetch = FetchType.EAGER)
	@JoinColumn(name = "experimentId")
	public Set<SaxsDataCollection3VO> getDataCollections() {
		return dataCollections;
	}

	public void setDataCollections(Set<SaxsDataCollection3VO> dataCollections) {
		this.dataCollections = dataCollections;
	}

	@Transient
	public List<SaxsDataCollection3VO> getDataCollectionList() {
		List<SaxsDataCollection3VO> list = new ArrayList<SaxsDataCollection3VO>();
		Iterator<SaxsDataCollection3VO> iterator = this.getDataCollections().iterator();
		while (iterator.hasNext()) {
			list.add(iterator.next());
		}
		return list;
	}

	@OneToMany(fetch = FetchType.LAZY)
	@JoinColumn(name = "experimentId")
	public Set<Specimen3VO> getSamples() {
		return samples3VOs;
	}

	public void setSamples(Set<Specimen3VO> samples) {
		this.samples3VOs = samples;
	}

	@Transient
	public Specimen3VO getSampleById(int sampleId) {
		for (Specimen3VO sample : this.getSamples()) {
			if (sample.getSpecimenId().equals(sampleId)) {
				return sample;
			}
		}
		return null;

	}

	public String getCodeSpecimen(Measurement3VO specimen) {
		Specimen3VO sample = this.getSampleById(specimen.getSpecimenId());
		return this.getCodeSpecimen(sample, specimen);
	}

	public String getCodeSpecimen(Specimen3VO sample3vo, Measurement3VO specimen) {
		String code = sample3vo.getCode();// this.getCodeSample(sample3vo);
		if (sample3vo.getMacromolecule3VO() == null) {
			return code + "_" + specimen.getExposureTemperature();
		} else {
			return code + "_" + specimen.getExposureTemperature() + "_" + sample3vo.getConcentration();
		}
	}

	@Transient
	public Specimen3VO getSampleByPosition(Sampleplateposition3VO position) {
		Set<Specimen3VO> specimens = this.getSamples();
		for (Specimen3VO sample : specimens) {
			if (sample.getSampleplateposition3VO() != null) {
				Sampleplateposition3VO specimenPosition = sample.getSampleplateposition3VO();
				if (specimenPosition.getSamplePlateId().equals(position.getSamplePlateId())) {
					if (specimenPosition.getRowNumber() == position.getRowNumber()
							&& specimenPosition.getColumnNumber() == position.getColumnNumber()) {
						return sample;
					}
				}
			}
		}
		return null;
	}

	@Transient
	public SaxsDataCollection3VO getDataCollectionByMeasurementId(int measurementId) {
		Measurement3VO measurement = this.getMeasurementById(measurementId);
		Set<SaxsDataCollection3VO> dataCollections = this.getDataCollections();
		for (SaxsDataCollection3VO saxsDataCollection3VO : dataCollections) {
			for (MeasurementTodataCollection3VO measurementToDataCollection : saxsDataCollection3VO
					.getMeasurementtodatacollection3VOs()) {
				if (measurement.getMeasurementId().equals(measurementToDataCollection.getMeasurementId())) {
					return saxsDataCollection3VO;
				}
			}
		}
		return null;
	}

	@Transient
	public List<SaxsDataCollection3VO> getDataCollectionListByMeasurementId(int measurementId) {
		List<SaxsDataCollection3VO> list = new ArrayList<SaxsDataCollection3VO>();
		Measurement3VO measurement = this.getMeasurementById(measurementId);
		Set<SaxsDataCollection3VO> dataCollections = this.getDataCollections();
		for (SaxsDataCollection3VO saxsDataCollection3VO : dataCollections) {
			for (MeasurementTodataCollection3VO measurementToDataCollection : saxsDataCollection3VO
					.getMeasurementtodatacollection3VOs()) {
				if (measurement.getMeasurementId().equals(measurementToDataCollection.getMeasurementId())) {
					list.add(saxsDataCollection3VO);
				}
			}
		}
		return list;
	}

	@Transient
	public List<MeasurementTodataCollection3VO> getMeasurementsOfDataCollectionByMeasurementId(int measurementId) {
		SaxsDataCollection3VO dc = getDataCollectionByMeasurementId(measurementId);
		List<MeasurementTodataCollection3VO> list = new ArrayList<MeasurementTodataCollection3VO>();
		for (MeasurementTodataCollection3VO iterable_element : dc.getMeasurementtodatacollection3VOs()) {
			list.add(iterable_element);
		}
		return list;
	}

	@Transient
	public SaxsDataCollection3VO getDataCollectionById(int dataCollectionId) {
		Set<SaxsDataCollection3VO> dataCollections = this.getDataCollections();
		for (SaxsDataCollection3VO saxsDataCollection3VO : dataCollections) {
			if (saxsDataCollection3VO.equals(dataCollectionId)) {
				return saxsDataCollection3VO;
			}
		}
		return null;
	}

	@Transient
	public Measurement3VO getMeasurementBefore(int measurementId) {
		Integer measurementBeforeId = this.getMeasurementIdBefore(measurementId);
		if (measurementBeforeId != null)
			return this.getMeasurementById(measurementBeforeId);
		return null;
	}

	@Transient
	public Integer getMeasurementIdBefore(int measurementId) {
		SaxsDataCollection3VO dataCollection = this.getDataCollectionByMeasurementId(measurementId);
		if (dataCollection != null) {
			for (MeasurementTodataCollection3VO measurement : dataCollection.getMeasurementtodatacollection3VOs()) {
				if (measurement.getDataCollectionOrder() == 1) {
					return measurement.getMeasurementId();
				}
			}
		}
		return null;
	}

	@Transient
	public Measurement3VO getMeasurementAfter(int measurementId) {
		Integer measurementAfterId = this.getMeasurementIdAfter(measurementId);
		if (measurementAfterId != null)
			return this.getMeasurementById(measurementAfterId);
		return null;
	}

	@Transient
	public Integer getMeasurementIdAfter(int measurementId) {
		SaxsDataCollection3VO dataCollection = this.getDataCollectionByMeasurementId(measurementId);
		if (dataCollection != null) {
			for (MeasurementTodataCollection3VO measurement : dataCollection.getMeasurementtodatacollection3VOs()) {
				if (measurement.getDataCollectionOrder() == 3) {
					return measurement.getMeasurementId();
				}
			}
		}
		return null;
	}

	@Column(name = "sourceFilePath")
	public String getSourceFilePath() {
		return sourceFilePath;
	}

	public void setSourceFilePath(String sourceFilePath) {
		this.sourceFilePath = sourceFilePath;
	}

	@Column(name = "experimentType")
	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "dataAcquisitionFilePath")
	public String getDataAcquisitionFilePath() {
		return dataAcquisitionFilePath;
	}

	public void setDataAcquisitionFilePath(String dataAcquisitionFilePath) {
		this.dataAcquisitionFilePath = dataAcquisitionFilePath;
	}

	@Column(name = "status")
	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

}
