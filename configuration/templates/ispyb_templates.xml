<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="ispybEjb3Dao">/*************************************************************************************************&#13;
 * This file is part of ISPyB.&#13;
 * &#13;
 * ISPyB is free software: you can redistribute it and/or modify&#13;
 * it under the terms of the GNU Lesser General Public License as published by&#13;
 * the Free Software Foundation, either version 3 of the License, or&#13;
 * (at your option) any later version.&#13;
 * &#13;
 * ISPyB is distributed in the hope that it will be useful,&#13;
 * but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
 * GNU Lesser General Public License for more details.&#13;
 * &#13;
 * You should have received a copy of the GNU Lesser General Public License&#13;
 * along with ISPyB.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 * &#13;
 * Contributors : S. Delageniere, R. Leal, L. Launer, K. Levik, S. Veyrier, P. Brenchereau, M. Bodin, M. Bodin&#13;
 ****************************************************************************************************/&#13;
&#13;
package ispyb.server.common.daos.${subPackName};&#13;
&#13;
import java.util.List;&#13;
&#13;
import javax.ejb.Local;&#13;
&#13;
import ispyb.server.common.vos.${subPackName}.${BeanName}VO;&#13;
&#13;
/**&#13;
 * &lt;p&gt;&#13;
 * 	The data access object for ${BeanName} objects (rows of table&#13;
 *  ${TableName}).&#13;
 * &lt;/p&gt;&#13;
 */&#13;
@Local&#13;
public interface ${BeanName}DAO {&#13;
	&#13;
	/* Creation/Update methods ---------------------------------------------- */&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 *  Insert the given value object.&#13;
	 * 	TODO update this comment for insertion details.&#13;
	 * &lt;/p&gt;&#13;
     */&#13;
	public void create(${BeanName}VO vo) throws Exception;&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 *  Update the given value object.&#13;
	 * 	TODO update this comment for update details.&#13;
	 * &lt;/p&gt;&#13;
	 * @throws VOValidateException if the value object data integrity is not ok.&#13;
     */&#13;
	public ${BeanName}VO update(${BeanName}VO vo) throws Exception;&#13;
&#13;
	/* Deletion methods ----------------------------------------------------- */&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 * 	Deletes the given value object.&#13;
	 * &lt;/p&gt;&#13;
	 * @param vo the value object to delete.&#13;
     */&#13;
	public void delete(${BeanName}VO vo);&#13;
&#13;
	/* Find methods --------------------------------------------------------- */&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 * 	Returns the ${BeanName}VO instance matching the given primary key.&#13;
	 * &lt;/p&gt;&#13;
	 * &lt;p&gt;&#13;
	 *  &lt;u&gt;Please note&lt;/u&gt; that the booleans to fetch relationships are needed &lt;u&gt;ONLY&lt;/u&gt;&#13;
	 *  if the value object has to be used out the EJB container.&#13;
	 * &lt;/p&gt;&#13;
	 * @param pk the primary key of the object to load.&#13;
	 * @param fetchRelation1 if true, the linked instances by the relation "relation1" will be set.&#13;
	 * @param fetchRelation2 if true, the linked instances by the relation "relation2" will be set.&#13;
     */&#13;
	public ${BeanName}VO findByPk(Integer pk, boolean fetchRelation1, boolean fetchRelation2);&#13;
	&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 * 	Returns the ${BeanName}VO instances.&#13;
	 * &lt;/p&gt;&#13;
	 * &lt;p&gt;&#13;
	 *  &lt;u&gt;Please note&lt;/u&gt; that the booleans to fetch relationships are needed &lt;u&gt;ONLY&lt;/u&gt;&#13;
	 *  if the value object has to be used out the EJB container.&#13;
	 * &lt;/p&gt;&#13;
	 * @param fetchRelation1 if true, the linked instances by the relation "relation1" will be set.&#13;
	 * @param fetchRelation2 if true, the linked instances by the relation "relation2" will be set.&#13;
     */&#13;
	public List&lt;${BeanName}VO&gt; findAll(boolean fetchRelation1, boolean fetchRelation2);&#13;
&#13;
	/**&#13;
	 * &#13;
	 * @param param1&#13;
	 * @param param2&#13;
	 * @return&#13;
	 */&#13;
	public List&lt;${BeanName}VO&gt; findFiltered(Integer param1, String param2);&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="ispybEjb3DaoBean">/*************************************************************************************************&#13;
 * This file is part of ISPyB.&#13;
 * &#13;
 * ISPyB is free software: you can redistribute it and/or modify&#13;
 * it under the terms of the GNU Lesser General Public License as published by&#13;
 * the Free Software Foundation, either version 3 of the License, or&#13;
 * (at your option) any later version.&#13;
 * &#13;
 * ISPyB is distributed in the hope that it will be useful,&#13;
 * but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
 * GNU Lesser General Public License for more details.&#13;
 * &#13;
 * You should have received a copy of the GNU Lesser General Public License&#13;
 * along with ISPyB.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 * &#13;
 * Contributors : S. Delageniere, R. Leal, L. Launer, K. Levik, S. Veyrier, P. Brenchereau, M. Bodin, M. Bodin&#13;
 ****************************************************************************************************/&#13;
&#13;
package ispyb.server.common.daos.${subPackName};&#13;
&#13;
import java.util.List;&#13;
&#13;
import javax.ejb.Stateless;&#13;
import javax.persistence.EntityManager;&#13;
import javax.persistence.PersistenceContext;&#13;
import javax.persistence.Query;&#13;
import javax.persistence.NoResultException;&#13;
&#13;
import org.apache.log4j.Logger;&#13;
&#13;
import org.hibernate.Criteria;&#13;
import org.hibernate.Session;&#13;
import org.hibernate.criterion.Order;&#13;
import org.hibernate.criterion.Restrictions;&#13;
&#13;
import ispyb.server.common.vos.${subPackName}.${BeanName}VO;&#13;
&#13;
&#13;
/**&#13;
 * &lt;p&gt;&#13;
 * 	The data access object for ${BeanName} objects (rows of table&#13;
 *  ${TableName}).&#13;
 * &lt;/p&gt;&#13;
 * @see {@link ${BeanName}DAO}&#13;
 */&#13;
@Stateless&#13;
public class ${BeanName}DAOBean implements ${BeanName}DAO {&#13;
	&#13;
	private final static Logger LOG = Logger.getLogger(${BeanName}DAOBean.class);&#13;
&#13;
	// Generic HQL request to find instances of ${BeanName} by pk&#13;
	// TODO choose between left/inner join&#13;
	private static final String FIND_BY_PK(boolean fetchLink1, boolean fetchLink2) {&#13;
		return "from ${BeanName}VO vo "&#13;
				+ (fetchLink1 ? "&lt;inner|left&gt; join fetch vo.link1 " : "")&#13;
 			    + (fetchLink2 ? "&lt;inner|left&gt; join fetch vo.link2 " : "")&#13;
				+ "where vo.pk = :pk";&#13;
	}&#13;
&#13;
	// Generic HQL request to find all instances of ${BeanName}&#13;
	// TODO choose between left/inner join&#13;
	private static final String FIND_ALL(boolean fetchLink1, boolean fetchLink2) {&#13;
		return "from ${BeanName}VO vo "&#13;
				+ (fetchLink1 ? "&lt;inner|left&gt; join fetch vo.link1 " : "")&#13;
 			    + (fetchLink2 ? "&lt;inner|left&gt; join fetch vo.link2 " : "");&#13;
	}&#13;
&#13;
	@PersistenceContext&#13;
	private EntityManager entityManager;&#13;
&#13;
	/* Creation/Update methods ---------------------------------------------- */&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 *  Insert the given value object.&#13;
	 * 	TODO update this comment for insertion details.&#13;
	 * &lt;/p&gt;&#13;
     */&#13;
	public void create(${BeanName}VO vo) throws Exception {&#13;
		this.checkAndCompleteData(vo, true);&#13;
		this.entityManager.persist(vo);&#13;
	}&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 *  Update the given value object.&#13;
	 * 	TODO update this comment for update details.&#13;
	 * &lt;/p&gt;&#13;
     */&#13;
	public ${BeanName}VO update(${BeanName}VO vo) throws Exception {&#13;
		this.checkAndCompleteData(vo, false);&#13;
		return entityManager.merge(vo);&#13;
	}&#13;
&#13;
	/* Deletion methods ----------------------------------------------------- */&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 * 	Deletes the given value object.&#13;
	 * &lt;/p&gt;&#13;
	 * @param vo the value object to delete.&#13;
     */&#13;
	public void delete(${BeanName}VO vo) {&#13;
		entityManager.remove(vo);&#13;
	}&#13;
&#13;
	/* Find methods --------------------------------------------------------- */&#13;
&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 * 	Returns the ${BeanName}VO instance matching the given primary key.&#13;
	 * &lt;/p&gt;&#13;
	 * &lt;p&gt;&#13;
	 *  &lt;u&gt;Please note&lt;/u&gt; that the booleans to fetch relationships are needed &lt;u&gt;ONLY&lt;/u&gt;&#13;
	 *  if the value object has to be used out the EJB container.&#13;
	 * &lt;/p&gt;&#13;
	 * @param pk the primary key of the object to load.&#13;
	 * @param fetchRelation1 if true, the linked instances by the relation "relation1" will be set.&#13;
	 * @param fetchRelation2 if true, the linked instances by the relation "relation2" will be set.&#13;
     */&#13;
	public ${BeanName}VO findByPk(Integer pk, boolean fetchRelation1, boolean fetchRelation2) {&#13;
		try{&#13;
			return (${BeanName}VO) entityManager.createQuery(&#13;
				FIND_BY_PK(fetchRelation1, fetchRelation2)).setParameter("pk", pk).getSingleResult();&#13;
		}catch(NoResultException e){&#13;
			return null;&#13;
		}&#13;
	}&#13;
	&#13;
	/**&#13;
	 * &lt;p&gt;&#13;
	 * 	Returns the ${BeanName}VO instances.&#13;
	 * &lt;/p&gt;&#13;
	 * &lt;p&gt;&#13;
	 *  &lt;u&gt;Please note&lt;/u&gt; that the booleans to fetch relationships are needed &lt;u&gt;ONLY&lt;/u&gt;&#13;
	 *  if the value object has to be used out the EJB container.&#13;
	 * &lt;/p&gt;&#13;
	 * @param fetchRelation1 if true, the linked instances by the relation "relation1" will be set.&#13;
	 * @param fetchRelation2 if true, the linked instances by the relation "relation2" will be set.&#13;
     */&#13;
	@SuppressWarnings("unchecked")&#13;
	public List&lt;${BeanName}VO&gt; findAll(boolean fetchRelation1, boolean fetchRelation2) {&#13;
		return (List&lt;${BeanName}VO&gt;) entityManager.createQuery(&#13;
			FIND_ALL(fetchRelation1, fetchRelation2)).getResultList();&#13;
	}&#13;
&#13;
	@SuppressWarnings("unchecked")&#13;
	public List&lt;${BeanName}VO&gt; findFiltered(Integer param1, String param2) {&#13;
&#13;
		Session session = (Session) this.entityManager.getDelegate();&#13;
&#13;
		Criteria crit = session.createCriteria(${BeanName}VO.class);&#13;
&#13;
		crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY); // DISTINCT RESULTS !&#13;
&#13;
		if (param2 != null &amp;&amp; !param2.isEmpty()) {&#13;
			crit.add(Restrictions.ilike("param2", param2));&#13;
		}&#13;
&#13;
		if (param1 != null) {&#13;
			crit.add(Restrictions.eq("param1", param1));&#13;
		}&#13;
		crit.addOrder(Order.desc("param1"));&#13;
&#13;
		return crit.list();&#13;
	}&#13;
&#13;
	/* Private methods ------------------------------------------------------ */&#13;
&#13;
	/**&#13;
	 * Checks the data for integrity. E.g. if references and categories exist.&#13;
	 * @param vo the data to check&#13;
	 * @param create should be true if the value object is just being created in the DB, this avoids some checks like testing the primary key&#13;
	 * @exception VOValidateException if data is not correct&#13;
	 */&#13;
	private void checkAndCompleteData(${BeanName}VO vo, boolean create) throws Exception {&#13;
		&#13;
		if(create) {&#13;
			if(vo.getPk() != null) {&#13;
				throw new IllegalArgumentException("Primary key is already set! This must be done automatically. Please, set it to null!");&#13;
			}&#13;
		}&#13;
		else {&#13;
			if(vo.getPk() == null) {&#13;
				throw new IllegalArgumentException("Primary key is not set for update!");&#13;
			}&#13;
		}&#13;
		// check value object&#13;
		vo.checkValues(create);&#13;
		// TODO check primary keys for existence in DB&#13;
	}&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="ispybEjb3Session">/*************************************************************************************************&#13;
 * This file is part of ISPyB.&#13;
 * &#13;
 * ISPyB is free software: you can redistribute it and/or modify&#13;
 * it under the terms of the GNU Lesser General Public License as published by&#13;
 * the Free Software Foundation, either version 3 of the License, or&#13;
 * (at your option) any later version.&#13;
 * &#13;
 * ISPyB is distributed in the hope that it will be useful,&#13;
 * but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
 * GNU Lesser General Public License for more details.&#13;
 * &#13;
 * You should have received a copy of the GNU Lesser General Public License&#13;
 * along with ISPyB.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 * &#13;
 * Contributors : S. Delageniere, R. Leal, L. Launer, K. Levik, S. Veyrier, P. Brenchereau, M. Bodin, M. Bodin&#13;
 ****************************************************************************************************/&#13;
&#13;
package ispyb.server.common.services.${subPackName};&#13;
&#13;
import javax.ejb.Remote;&#13;
import java.util.List;&#13;
import ispyb.server.common.vos.${subPackName}.${BeanName}VO;&#13;
&#13;
@Remote&#13;
public interface ${BeanName}Service {&#13;
&#13;
	/**&#13;
	 * Create new ${BeanName}.&#13;
	 * @param vo the entity to persist&#13;
	 * @return the persisted entity&#13;
	 */&#13;
	public ${BeanName}VO create(final ${BeanName}VO vo) throws Exception;&#13;
&#13;
	/**&#13;
	 * Update the ${BeanName} data.&#13;
	 * @param vo the entity data to update&#13;
	 * @return the updated entity&#13;
	 */&#13;
	public ${BeanName}VO update(final ${BeanName}VO vo) throws Exception;&#13;
&#13;
	/**&#13;
	 * Remove the ${BeanName} from its pk.&#13;
	 * @param vo the entity to remove&#13;
	 */&#13;
	public void deleteByPk(final Integer pk) throws Exception;&#13;
&#13;
	/**&#13;
	 * Remove the ${BeanName}.&#13;
	 * @param vo the entity to remove.&#13;
	 */&#13;
	public void delete(final ${BeanName}VO vo) throws Exception;&#13;
&#13;
	/**&#13;
	 * Finds a ${BeanName} entity by its primary key and set linked value objects if necessary.&#13;
	 * @param pk the primary key&#13;
	 * @param withLink1&#13;
	 * @param withLink2&#13;
	 * @return the Scientist value object&#13;
	 */&#13;
	public ${BeanName}VO findByPk(final Integer pk, final boolean withLink1, final boolean withLink2) throws Exception;&#13;
&#13;
	/**&#13;
	 * loads the vo with all the linked object in eager fetch mode&#13;
	 * &#13;
	 * @param vo&#13;
	 * @return&#13;
	 * @throws Exception&#13;
	 */&#13;
	public ${BeanName}VO loadEager(${BeanName}VO vo) throws Exception;&#13;
&#13;
&#13;
	/**&#13;
	 * Find all ${BeanName} and set linked value objects if necessary.&#13;
	 * @param withLink1&#13;
	 * @param withLink2&#13;
	 */&#13;
	public List&lt;${BeanName}VO&gt; findAll(final boolean withLink1, final boolean withLink2, final boolean detachLight) throws Exception;&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="ispybEjb3SessionBean">/*************************************************************************************************&#13;
 * This file is part of ISPyB.&#13;
 * &#13;
 * ISPyB is free software: you can redistribute it and/or modify&#13;
 * it under the terms of the GNU Lesser General Public License as published by&#13;
 * the Free Software Foundation, either version 3 of the License, or&#13;
 * (at your option) any later version.&#13;
 * &#13;
 * ISPyB is distributed in the hope that it will be useful,&#13;
 * but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
 * GNU Lesser General Public License for more details.&#13;
 * &#13;
 * You should have received a copy of the GNU Lesser General Public License&#13;
 * along with ISPyB.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 * &#13;
 * Contributors : S. Delageniere, R. Leal, L. Launer, K. Levik, S. Veyrier, P. Brenchereau, M. Bodin, M. Bodin&#13;
 ****************************************************************************************************/&#13;
package ispyb.server.common.services.${subPackName};&#13;
&#13;
&#13;
import ispyb.server.common.daos.${subPackName}.${BeanName}DAO;&#13;
import ispyb.server.common.util.ejb.EJBAccessCallback;&#13;
import ispyb.server.common.util.ejb.EJBAccessTemplate;&#13;
import ispyb.server.common.vos.${subPackName}.${BeanName}VO;&#13;
&#13;
import java.util.ArrayList;&#13;
import java.util.List;&#13;
&#13;
import javax.annotation.Resource;&#13;
import javax.ejb.EJB;&#13;
import javax.ejb.SessionContext;&#13;
import javax.ejb.Stateless;&#13;
import javax.jws.WebMethod;&#13;
import javax.jws.WebService;&#13;
&#13;
import org.apache.cxf.interceptor.security.AccessDeniedException;&#13;
import org.apache.log4j.Logger;&#13;
&#13;
/**&#13;
 * &lt;p&gt;&#13;
 *  This session bean handles ISPyB ${BeanName}.&#13;
 * &lt;/p&gt;&#13;
 */&#13;
@WebService(name = "${BeanName}Service", serviceName = "ispybWS", targetNamespace = "http://ispyb.ejb3.webservices")&#13;
@Stateless&#13;
public class ${BeanName}ServiceBean implements ${BeanName}Service,${BeanName}ServiceLocal  {&#13;
&#13;
	private final static Logger LOG = Logger.getLogger(${BeanName}ServiceBean.class);&#13;
&#13;
	@EJB&#13;
	private ${BeanName}DAO dao;&#13;
&#13;
	@Resource&#13;
	private SessionContext context;&#13;
	&#13;
	public ${BeanName}ServiceBean() {&#13;
	};&#13;
&#13;
	/**&#13;
	 * Create new ${BeanName}.&#13;
	 * @param vo the entity to persist.&#13;
	 * @return the persisted entity.&#13;
	 */&#13;
	public ${BeanName}VO create(final ${BeanName}VO vo) throws Exception {		&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);&#13;
		return (${BeanName}VO) template.execute(new EJBAccessCallback() {&#13;
		&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				checkCreateChangeRemoveAccess();&#13;
				// TODO Edit this business code&#13;
				dao.create(vo);&#13;
				return vo;&#13;
			}&#13;
		&#13;
		});&#13;
	}&#13;
&#13;
	/**&#13;
	 * Update the ${BeanName} data.&#13;
	 * @param vo the entity data to update.&#13;
	 * @return the updated entity.&#13;
	 */&#13;
	public ${BeanName}VO update(final ${BeanName}VO vo) throws Exception {&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);		&#13;
		return (${BeanName}VO) template.execute(new EJBAccessCallback() {&#13;
			&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				checkCreateChangeRemoveAccess();&#13;
				// TODO Edit this business code&#13;
				return dao.update(vo);&#13;
			}&#13;
		&#13;
		});		&#13;
	}&#13;
&#13;
	/**&#13;
	 * Remove the ${BeanName} from its pk&#13;
	 * @param vo the entity to remove.&#13;
	 */&#13;
	public void deleteByPk(final Integer pk) throws Exception {&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);		&#13;
		template.execute(new EJBAccessCallback() {&#13;
			&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				checkCreateChangeRemoveAccess();&#13;
				${BeanName}VO vo = findByPk(pk, false, false);&#13;
				// TODO Edit this business code				&#13;
				delete(vo);&#13;
				return vo;&#13;
			}&#13;
		&#13;
		});				&#13;
&#13;
	}&#13;
&#13;
	/**&#13;
	 * Remove the ${BeanName}&#13;
	 * @param vo the entity to remove.&#13;
	 */&#13;
	public void delete(final ${BeanName}VO vo) throws Exception {&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);		&#13;
		template.execute(new EJBAccessCallback() {&#13;
			&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				checkCreateChangeRemoveAccess();&#13;
				// TODO Edit this business code&#13;
				dao.delete(vo);&#13;
				return vo;&#13;
			}&#13;
		&#13;
		});			&#13;
	}&#13;
&#13;
	/**&#13;
	 * Finds a Scientist entity by its primary key and set linked value objects if necessary&#13;
	 * @param pk the primary key&#13;
	 * @param withLink1&#13;
	 * @param withLink2&#13;
	 * @return the ${BeanName} value object&#13;
	 */&#13;
	public ${BeanName}VO findByPk(final Integer pk, final boolean withLink1, final boolean withLink2) throws Exception {&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);		&#13;
		return (${BeanName}VO) template.execute(new EJBAccessCallback() {&#13;
			&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				checkCreateChangeRemoveAccess();&#13;
				// TODO Edit this business code&#13;
				${BeanName}VO found = dao.findByPk(pk, withLink1, withLink2);&#13;
				return found;&#13;
			}&#13;
		&#13;
		});				&#13;
	}&#13;
&#13;
	/**&#13;
	 * loads the vo with all the linked object in eager fetch mode&#13;
	 * &#13;
	 * @param vo&#13;
	 * @return&#13;
	 * @throws Exception&#13;
	 */&#13;
	public ${BeanName}VO loadEager(${BeanName}VO vo) throws Exception {&#13;
		${BeanName}VO newVO = this.findByPk(vo.getPk(), true, true);&#13;
		return newVO;&#13;
	}&#13;
&#13;
	// TODO remove following method if not adequate&#13;
	/**&#13;
	 * Find all ${BeanName}s and set linked value objects if necessary&#13;
	 * @param withLink1&#13;
	 * @param withLink2&#13;
	 */&#13;
	public List&lt;${BeanName}VO&gt; findAll(final boolean withLink1, final boolean withLink2, final boolean detachLight) throws Exception {&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);		&#13;
		return (${BeanName}VO[]) template.execute(new EJBAccessCallback() {&#13;
			&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				Collection&lt;${BeanName}VO&gt; foundEntities = dao.findAll(withLink1, withLink2);&#13;
				${BeanName}VO[] vos;&#13;
				if (detachLight)&#13;
					vos = getLight${BeanName}VOs(foundEntities);&#13;
				else&#13;
					vos = get${BeanName}VOs(foundEntities);&#13;
				return vos;&#13;
			}&#13;
		&#13;
		});						&#13;
	}&#13;
&#13;
&#13;
	/**&#13;
	 * Check if user has access rights to create, change and remove ${BeanName} entities. If not set rollback only and throw AccessDeniedException&#13;
	 * @throws AccessDeniedException&#13;
	 */&#13;
	private void checkCreateChangeRemoveAccess() throws Exception {&#13;
		EJBAccessTemplate template = new EJBAccessTemplate(LOG, context, this);		&#13;
		template.execute(new EJBAccessCallback() {&#13;
			&#13;
			public Object doInEJBAccess(Object parent) throws Exception {&#13;
				//AuthorizationServiceLocal autService = (AuthorizationServiceLocal) ServiceLocator.getInstance().getService(AuthorizationServiceLocalHome.class);			// TODO change method to the one checking the needed access rights&#13;
				//autService.checkUserRightToChangeAdminData();&#13;
				return null;&#13;
			}&#13;
		&#13;
		});			&#13;
	}&#13;
&#13;
	/**&#13;
	 * Get all ${BeanName} entity VOs from a collection of ${BeanName} local entities.&#13;
	 * @param localEntities&#13;
	 * @return&#13;
	 */&#13;
	@SuppressWarnings("unchecked")&#13;
	private ${BeanName}VO[] get${BeanName}VOs(Collection&lt;${BeanName}VO&gt; entities) {&#13;
		ArrayList results = new ArrayList(entities.size());&#13;
		for (${BeanName}VO vo : entities) {&#13;
			results.add(vo);&#13;
		}&#13;
		${BeanName}VO[] tmpResults = new ${BeanName}VO[results.size()];&#13;
		return (${BeanName}VO[]) results.toArray(tmpResults);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Get all lights entities&#13;
	 * &#13;
	 * @param localEntities&#13;
	 * @return&#13;
	 * @throws CloneNotSupportedException&#13;
	 */&#13;
	@SuppressWarnings("unchecked")&#13;
	private ${BeanName}VO[] getLight${BeanName}VOs(Collection&lt;${BeanName}VO&gt; entities) throws CloneNotSupportedException {&#13;
		ArrayList results = new ArrayList(entities.size());&#13;
		for (${BeanName}VO vo : entities) {&#13;
			${BeanName}VO otherVO = getLight${BeanName}VO(vo);&#13;
			results.add(otherVO);&#13;
		}&#13;
		${BeanName}VO[] tmpResults = new ${BeanName}VO[results.size()];&#13;
		return (${BeanName}VO[]) results.toArray(tmpResults);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Get a clone of an entity witout linked collections&#13;
     * used for webservices&#13;
	 * &#13;
	 * @param localEntity&#13;
	 * @return&#13;
	 * @throws CloneNotSupportedException&#13;
	 */&#13;
	@SuppressWarnings("unchecked")&#13;
	private ${BeanName}VO getLight${BeanName}VO(${BeanName}VO vo) throws CloneNotSupportedException {&#13;
		${BeanName}VO otherVO = vo.clone();&#13;
		otherVO.setXxxxxxx(null);&#13;
		otherVO.setYyyyyyy(null);&#13;
		return otherVO;&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="ispybEjb3VO">/*************************************************************************************************&#13;
 * This file is part of ISPyB.&#13;
 * &#13;
 * ISPyB is free software: you can redistribute it and/or modify&#13;
 * it under the terms of the GNU Lesser General Public License as published by&#13;
 * the Free Software Foundation, either version 3 of the License, or&#13;
 * (at your option) any later version.&#13;
 * &#13;
 * ISPyB is distributed in the hope that it will be useful,&#13;
 * but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
 * GNU Lesser General Public License for more details.&#13;
 * &#13;
 * You should have received a copy of the GNU Lesser General Public License&#13;
 * along with ISPyB.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 * &#13;
 * Contributors : S. Delageniere, R. Leal, L. Launer, K. Levik, S. Veyrier, P. Brenchereau, M. Bodin, M. Bodin&#13;
 ****************************************************************************************************/&#13;
&#13;
package ispyb.server.common.vos.${subPackName};&#13;
&#13;
import javax.persistence.Column;&#13;
import javax.persistence.Entity;&#13;
import javax.persistence.GeneratedValue;&#13;
import javax.persistence.Id;&#13;
import javax.persistence.Table;&#13;
&#13;
import ispyb.server.common.vos.ISPyBValueObject;&#13;
&#13;
import org.apache.log4j.Logger;&#13;
&#13;
/**&#13;
 * ${BeanName} value object mapping table ${TableName}&#13;
 * &#13;
 */&#13;
@Entity&#13;
@Table(name="${TableName}")&#13;
public class ${BeanName}VO extends ISPyBValueObject implements Cloneable {&#13;
&#13;
	private final static Logger LOG = Logger.getLogger(${BeanName}VO.class);&#13;
&#13;
	// generate the serialVersionUID using the 'serialver' tool of java and enter it here&#13;
	// this prevents later invalid class version exceptions when the value object evolves&#13;
	private static final long serialVersionUID = 1234567901234567890L;&#13;
&#13;
	@Id&#13;
	@GeneratedValue&#13;
	@Column(name="${TableName}_NO")	&#13;
	private Integer pk;&#13;
&#13;
	// TODO add properties for all columns&#13;
&#13;
	/**&#13;
	 * @return Returns the pk.&#13;
	 */&#13;
	public Integer getPk() {&#13;
		return pk;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @param pk The pk to set.&#13;
	 */&#13;
	public void setPk(Integer pk) {&#13;
		this.pk = pk;&#13;
	}&#13;
&#13;
	// TODO generate all getter and setters&#13;
&#13;
	/**&#13;
	 * Checks the values of this value object for correctness and&#13;
	 * completeness. Should be done before persisting the data in the DB.&#13;
	 * @param create should be true if the value object is just being created in the DB, this avoids some checks like testing the primary key&#13;
	 * @throws Exception if the data of the value object is not correct&#13;
	 */&#13;
	public void checkValues(boolean create) throws Exception {&#13;
    //TODO&#13;
	}&#13;
&#13;
	/**&#13;
	 * used to clone an entity to set the linked collectio9ns to null, for webservices&#13;
	 */&#13;
	@Override&#13;
	public ${BeanName}VO clone() throws CloneNotSupportedException {&#13;
		// TODO Auto-generated method stub&#13;
		return (${BeanName}VO) super.clone();&#13;
	}&#13;
}&#13;
</template></templates>